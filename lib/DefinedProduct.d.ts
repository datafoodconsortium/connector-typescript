import INutrientCharacteristic from "./INutrientCharacteristic.js";
import IPartOrigin from "./IPartOrigin.js";
import IProductType from "./IProductType.js";
import Claimable from "./Claimable.js";
import IDefinedProduct from "./IDefinedProduct.js";
import ICatalogItem from "./ICatalogItem.js";
import Quantifiable from "./Quantifiable.js";
import INatureOrigin from "./INatureOrigin.js";
import IPhysicalCharacteristic from "./IPhysicalCharacteristic.js";
import ICertification from "./ICertification.js";
import IGeographicalOrigin from "./IGeographicalOrigin.js";
import IAllergenCharacteristic from "./IAllergenCharacteristic.js";
import { SemanticObject } from "@virtual-assembly/semantizer";
import { Semanticable } from "@virtual-assembly/semantizer";
export default abstract class DefinedProduct extends SemanticObject implements IDefinedProduct {
    private name;
    private description;
    private productType;
    private quantity;
    private alcoholPercentage;
    private lifetime;
    private claims;
    private usageOrStorageConditions;
    private allergenCharacteristics;
    private nutrientCharacteristics;
    private physicalCharacteristics;
    private geographicalOrigin;
    private catalogItems;
    private certifications;
    private natureOrigin;
    private partOrigin;
    constructor(name: string, description: string);
    addClaim(claim: (Claimable & Semanticable)): void;
    setProductType(productType: (IProductType & Semanticable)): void;
    getProductType(): (IProductType & Semanticable) | undefined;
    getQuantity(): (Quantifiable & Semanticable) | undefined;
    setQuantity(quantity: (Quantifiable & Semanticable)): void;
    getClaims(): IterableIterator<(Claimable & Semanticable)>;
    addNutrientCharacteristic(nutrientCharacteristic: (INutrientCharacteristic & Semanticable)): void;
    getNatureOrigin(): IterableIterator<(INatureOrigin & Semanticable)>;
    addNatureOrigin(natureOrigin: (INatureOrigin & Semanticable)): void;
    getGeographicalOrigin(): (IGeographicalOrigin & Semanticable) | undefined;
    addAllergenCharacteristic(allergenCharacteristic: (IAllergenCharacteristic & Semanticable)): void;
    getPhysicalCharacteristics(): IterableIterator<(IPhysicalCharacteristic & Semanticable)>;
    addPartOrigin(partOrigin: (IPartOrigin & Semanticable)): void;
    getAlcoholPercentage(): number;
    getPartOrigin(): IterableIterator<(IPartOrigin & Semanticable)>;
    getUsageOrStorageConditions(): string;
    getNutrientCharacteristics(): IterableIterator<(INutrientCharacteristic & Semanticable)>;
    getLifetime(): string;
    setGeographicalOrigin(geographicalOrigin: (IGeographicalOrigin & Semanticable)): void;
    getAllergenCharacteristics(): IterableIterator<(IAllergenCharacteristic & Semanticable)>;
    addPhysicalCharacteristic(physicalCharacteristic: (IPhysicalCharacteristic & Semanticable)): void;
    getDescription(): string;
    setDescription(description: string): void;
    getName(): string;
    setName(name: string): void;
    addCatalogItem(catalogItem: (ICatalogItem & Semanticable)): void;
    getCatalogItems(): IterableIterator<(ICatalogItem & Semanticable)>;
    addCertification(certification: (ICertification & Semanticable)): void;
    getCertifications(): IterableIterator<(ICertification & Semanticable)>;
}
//# sourceMappingURL=DefinedProduct.d.ts.map