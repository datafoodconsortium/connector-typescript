import IProductType from "./IProductType.js";
import ICatalogItem from "./ICatalogItem.js";
import IGeographicalOrigin from "./IGeographicalOrigin.js";
import ICertification from "./ICertification.js";
import INatureOrigin from "./INatureOrigin.js";
import IQuantity from "./IQuantity.js";
import IPhysicalCharacteristic from "./IPhysicalCharacteristic.js";
import INutrientCharacteristic from "./INutrientCharacteristic.js";
import IDefinedProduct from "./IDefinedProduct.js";
import IAllergenCharacteristic from "./IAllergenCharacteristic.js";
import IClaim from "./IClaim.js";
import IPartOrigin from "./IPartOrigin.js";
import { SemanticObject } from "@virtual-assembly/semantizer";
import { Semanticable } from "@virtual-assembly/semantizer";
import IConnector from "./IConnector.js";
import IGetterOptions from "./IGetterOptions.js";
export default abstract class DefinedProduct extends SemanticObject implements IDefinedProduct {
    protected connector: IConnector;
    protected constructor(parameters: {
        connector: IConnector;
        semanticId?: string;
        semanticType?: string;
        other?: Semanticable;
        name?: string;
        description?: string;
        productType?: IProductType;
        quantity?: IQuantity;
        alcoholPercentage?: number;
        lifetime?: string;
        claims?: IClaim[];
        usageOrStorageConditions?: string;
        allergenCharacteristics?: IAllergenCharacteristic[];
        nutrientCharacteristics?: INutrientCharacteristic[];
        physicalCharacteristics?: IPhysicalCharacteristic[];
        geographicalOrigin?: IGeographicalOrigin;
        catalogItems?: ICatalogItem[];
        certifications?: ICertification[];
        natureOrigin?: INatureOrigin[];
        partOrigin?: IPartOrigin[];
    });
    setName(name: string): void;
    getName(): string;
    getPartOrigin(options?: IGetterOptions): Promise<Array<IPartOrigin>>;
    addNutrientCharacteristic(nutrientCharacteristic: INutrientCharacteristic): void;
    getUsageOrStorageConditions(): string;
    getGeographicalOrigin(options?: IGetterOptions): Promise<IGeographicalOrigin | undefined>;
    getAlcoholPercentage(): number;
    removeAllergenCharacteristic(allergenCharacteristic: IAllergenCharacteristic): void;
    getNutrientCharacteristics(options?: IGetterOptions): Promise<Array<INutrientCharacteristic>>;
    getPhysicalCharacteristics(options?: IGetterOptions): Promise<Array<IPhysicalCharacteristic>>;
    removeNatureOrigin(natureOrigin: INatureOrigin): void;
    getNatureOrigin(options?: IGetterOptions): Promise<Array<INatureOrigin>>;
    addPartOrigin(partOrigin: IPartOrigin): void;
    removeNutrientCharacteristic(nutrientCharacteristic: INutrientCharacteristic): void;
    setLifetime(lifetime: string): void;
    setAlcoholPercentage(alcoholPercentage: number): void;
    addPhysicalCharacteristic(physicalCharacteristic: IPhysicalCharacteristic): void;
    getAllergenCharacteristics(options?: IGetterOptions): Promise<Array<IAllergenCharacteristic>>;
    getLifetime(): string;
    addNatureOrigin(natureOrigin: INatureOrigin): void;
    addAllergenCharacteristic(allergenCharacteristic: IAllergenCharacteristic): void;
    removePhysicalCharacteristic(physicalCharacteristic: IPhysicalCharacteristic): void;
    removePartOrigin(partOrigin: IPartOrigin): void;
    setUsageOrStorageConditions(usageOrStorageConditions: string): void;
    setGeographicalOrigin(geographicalOrigin: IGeographicalOrigin): void;
    setDescription(description: string): void;
    getDescription(): string;
    removeCertification(certification: ICertification): void;
    getCertifications(options?: IGetterOptions): Promise<Array<ICertification>>;
    addCertification(certification: ICertification): void;
    getQuantity(options?: IGetterOptions): Promise<IQuantity | undefined>;
    getProductType(options?: IGetterOptions): Promise<IProductType | undefined>;
    removeClaim(claim: IClaim): void;
    getClaims(options?: IGetterOptions): Promise<Array<IClaim>>;
    addClaim(claim: IClaim): void;
    setProductType(productType: IProductType): void;
    setQuantity(quantity: IQuantity): void;
    addCatalogItem(catalogItem: ICatalogItem): void;
    getCatalogItems(options?: IGetterOptions): Promise<Array<ICatalogItem>>;
}
//# sourceMappingURL=DefinedProduct.d.ts.map