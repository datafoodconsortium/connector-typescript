import IQuantity from "./IQuantity.js";
import IDefinedProduct from "./IDefinedProduct.js";
import IAllergenCharacteristic from "./IAllergenCharacteristic.js";
import INutrientCharacteristic from "./INutrientCharacteristic.js";
import ISKOSConcept from "./ISKOSConcept.js";
import ICatalogItem from "./ICatalogItem.js";
import IPhysicalCharacteristic from "./IPhysicalCharacteristic.js";
import { SemanticObject } from "@virtual-assembly/semantizer";
import { Semanticable } from "@virtual-assembly/semantizer";
import IConnector from "./IConnector.js";
import IGetterOptions from "./IGetterOptions.js";
export default abstract class DefinedProduct extends SemanticObject implements IDefinedProduct {
    protected connector: IConnector;
    protected constructor(parameters: {
        connector: IConnector;
        semanticId?: string;
        semanticType?: string;
        other?: Semanticable;
        name?: string;
        description?: string;
        productType?: ISKOSConcept;
        quantity?: IQuantity;
        alcoholPercentage?: number;
        lifetime?: string;
        claims?: ISKOSConcept[];
        usageOrStorageConditions?: string;
        allergenCharacteristics?: IAllergenCharacteristic[];
        nutrientCharacteristics?: INutrientCharacteristic[];
        physicalCharacteristics?: IPhysicalCharacteristic[];
        geographicalOrigin?: ISKOSConcept;
        catalogItems?: ICatalogItem[];
        certifications?: ISKOSConcept[];
        natureOrigin?: ISKOSConcept[];
        partOrigin?: ISKOSConcept[];
        images?: string[];
        variants?: IDefinedProduct[];
        isVariantOf?: IDefinedProduct[];
        doNotStore?: boolean;
    });
    setProductType(productType: ISKOSConcept): void;
    addClaim(claim: ISKOSConcept): void;
    getPartOrigin(options?: IGetterOptions): Promise<ISKOSConcept[]>;
    removeIsVariantOf(parent: IDefinedProduct): void;
    getVariants(options?: IGetterOptions): Promise<IDefinedProduct[]>;
    removeNutrientCharacteristic(nutrientCharacteristic: INutrientCharacteristic): void;
    getProductType(options?: IGetterOptions): Promise<ISKOSConcept | undefined>;
    addIsVariantOf(parent: IDefinedProduct): void;
    getAlcoholPercentage(): number | undefined;
    addVariant(variant: IDefinedProduct): void;
    getName(): string | undefined;
    getClaims(options?: IGetterOptions): Promise<ISKOSConcept[]>;
    getIsVariantOf(options?: IGetterOptions): Promise<IDefinedProduct[]>;
    getGeographicalOrigin(options?: IGetterOptions): Promise<ISKOSConcept | undefined>;
    removeAllergenCharacteristic(allergenCharacteristic: IAllergenCharacteristic): void;
    setVariants(variants: IDefinedProduct[]): void;
    removeVariant(variant: IDefinedProduct): void;
    removeNatureOrigin(natureOrigin: ISKOSConcept): void;
    setLifetime(lifetime: string): void;
    addNatureOrigin(natureOrigin: ISKOSConcept): void;
    removePartOrigin(partOrigin: ISKOSConcept): void;
    addAllergenCharacteristic(allergenCharacteristic: IAllergenCharacteristic): void;
    addImage(image: string): void;
    setName(name: string): void;
    setAlcoholPercentage(alcoholPercentage: number): void;
    getQuantity(): IQuantity | undefined;
    getImages(): string[];
    getAllergenCharacteristics(options?: IGetterOptions): Promise<IAllergenCharacteristic[]>;
    getCatalogItems(options?: IGetterOptions): Promise<ICatalogItem[]>;
    getLifetime(): string | undefined;
    addNutrientCharacteristic(nutrientCharacteristic: INutrientCharacteristic): void;
    addPartOrigin(partOrigin: ISKOSConcept): void;
    removeClaim(claim: ISKOSConcept): void;
    getPhysicalCharacteristics(options?: IGetterOptions): Promise<IPhysicalCharacteristic[]>;
    getDescription(): string | undefined;
    getUsageOrStorageConditions(): string | undefined;
    setIsVariantOf(parents: IDefinedProduct[]): void;
    addCertification(certification: ISKOSConcept): void;
    setDescription(description: string): void;
    getCertifications(options?: IGetterOptions): Promise<ISKOSConcept[]>;
    getNutrientCharacteristics(options?: IGetterOptions): Promise<INutrientCharacteristic[]>;
    setQuantity(quantity: IQuantity): void;
    removePhysicalCharacteristic(physicalCharacteristic: IPhysicalCharacteristic): void;
    removeImage(image: string): void;
    setGeographicalOrigin(geographicalOrigin: ISKOSConcept): void;
    addPhysicalCharacteristic(physicalCharacteristic: IPhysicalCharacteristic): void;
    removeCertification(certification: ISKOSConcept): void;
    getNatureOrigin(options?: IGetterOptions): Promise<ISKOSConcept[]>;
    addCatalogItem(catalogItem: ICatalogItem): void;
    setUsageOrStorageConditions(usageOrStorageConditions: string): void;
}
//# sourceMappingURL=DefinedProduct.d.ts.map